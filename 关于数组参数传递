    数组名作为形参

void func1(int iArray[][10])
{

}



int main()
{
    int array[10][10];
    func1(array);

}

编译通过，注意形参声明一定要给出第二个维度的大小，要不编译不过。

    一维数组指针作为形参

void func2(int (*pArray)[10])
{

}

void func2_1(int (*pArray)[]) //编译通过，无法调用
{

}

int main()
{
    int array[10][10];
    func2(array);
}

其实二维数组名就是一个指向一维数组的指针，所以这种声明方式OK。必须指定一维数组的长度，如果没有指定的话，函数声明编译通过。但是如果一旦有调用代码，就有编译不通过，因为没有实参类型能匹配int[].

    二维数组引用作为形参

void func3(int (&pArray)[10][10])
{

}

int main()
{
    int array[10][10];
    func3(array);
}

必须指定两个维度的长度。

    二维数组指针作为形参

void func4(int (*pArray)[10][10])
{

}

int main()
{
    int array[10][10];
    func4(&array);

}

必须指定两个维度的长度。

 

以上方法都可以等价使用，对数组来说，没有值传递。

      还不满足，还有其他的声明方式吗？回到本文开始提到的问题：可以用双重指针int**作为形参，接受二维数组实参吗？答案是肯定的，但是又局限性。用双重指针作为形参，那么相应的实参也要是一个双重指针。事实上，这个双重指针其实指向一个元素是指针的数组，双重指针的声明方式，很适合传递动态创建的二维数组。怎么动态创建一个二维数组？如下程序：

 

 int main()
{
    int m = 10;
    int n = 10;
    int** p = new int[m][n];
}

 

会发现编译不通过，第二个维度长度必须为常量。那么怎么声明一个两个维度都能动态指定的二维数组呢？看下面：

 

 void func5(int** pArray, int m, int n)
{

}

#include <ctime>
int main()
{
    int m = 10;
    int n = 10;

    int** pArray = new int* [m];
    pArray[0] = new int[m * n]; // 分配连续内存

    // 用pArray[1][0]无法寻址，还需指定下标寻址方式
    for(int i = 1; i < m; i++)
    {
        pArray[i] = pArray[i-1] + n;
    }

    func5(pArray, m, n);
}   

